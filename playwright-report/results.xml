<testsuites id="" name="" tests="1043" failures="0" skipped="1043" errors="0" time="0.3888290000000001">
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="chromium" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="firefox" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="webkit" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Mobile Safari" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Microsoft Edge" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="auth-flow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to chat without authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should show BYOK modal when API key is required" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should allow guest user to provide API key via BYOK modal" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Guest User Flow › should handle invalid API key gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should display user menu and profile info" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should handle sign out process" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authenticated User Flow › should persist user preferences across sessions" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle authentication errors gracefully" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should handle session expiration" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Authentication State Transitions › should redirect after successful authentication" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should show rate limit dialog when limits are exceeded" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › Rate Limiting and Usage › should display usage statistics for authenticated users" classname="auth-flow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-flow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="Chat Message Flow › When user sends a message › should display the message and show loading indicator" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should handle empty messages gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user sends a message › should show error state when API fails" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When user interacts with suggestions › should send suggestion as message" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should start new chat when no messages exist" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When managing chat sessions › should clear chat when clear button is clicked" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should maintain scroll position during typing" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling long conversations › should handle rapid message sending" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle network disconnection gracefully" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should handle very long messages" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Message Flow › When handling edge cases › should preserve message across page reload" classname="chat-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="chat-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="18" failures="0" skipped="18" time="0" errors="0">
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should create new chat and handle first message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should handle chat creation failure gracefully" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Complete Chat Creation Flow › should auto-generate chat title after first exchange" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should allow model selection before sending message" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should switch models mid-conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Model Selection and Switching › should show model capabilities and pricing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should upload and process text file" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should handle file upload errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › File Upload Integration › should allow removing uploaded files" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should save conversation state during typing" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should handle conversation branching" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Conversation Management › should export conversation" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle streaming responses correctly" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should handle connection interruption during streaming" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Real-time Features › should show typing indicators" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should retry failed messages" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle quota exceeded errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Chat Workflow Integration › Error Recovery and Resilience › should handle API key errors" classname="chat-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="file-upload.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="File Upload › When uploading files › should show file upload button when available" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should upload a text file successfully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should handle multiple file uploads" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should show file preview and details" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When uploading files › should remove uploaded files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for file too large" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should show error for unsupported file type" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling upload errors › should handle network errors gracefully" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should include uploaded files in chat messages" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When sending messages with files › should clear files after successful submission" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle image files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When handling different file types › should handle PDF files" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should handle drag and drop file upload" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="File Upload › When using drag and drop › should show drag overlay during drag operations" classname="file-upload.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="model-selection.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Model Selection › When opening model selector › should display available models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should show model details and pricing" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should highlight favorite models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should filter models by search" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When opening model selector › should close selector with escape key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should update selected model display" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should persist model selection across page navigation" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should send messages with selected model" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When selecting a model › should show model-specific features when available" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should add model to favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should remove model from favorites" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When managing favorite models › should show favorites section at top" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should disable unavailable models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should show API key setup prompt for disabled models" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When handling model availability › should handle model loading errors gracefully" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should navigate models with arrow keys" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Model Selection › When using keyboard navigation › should select model with enter key" classname="model-selection.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-chat.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should enable multi-chat mode" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should allow selecting multiple models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Setup and Configuration › should validate model compatibility for multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should send message to multiple models simultaneously" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should handle partial failures in multi-model responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Parallel Multi-Model Conversations › should show loading states for all models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should display responses in comparison view" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should allow rating and comparing responses" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Response Comparison and Analysis › should export multi-model comparison" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should save multi-chat conversation history" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle model changes in ongoing multi-chat" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Multi-Chat Session Management › should handle context continuity across models" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle concurrent API calls efficiently" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should manage memory usage with multiple conversations" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-Chat Functionality Integration › Performance and Resource Management › should handle model timeout and recovery" classname="multi-chat.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="provider-responses.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="15" failures="0" skipped="15" time="0" errors="0">
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should validate openai API key" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should create valid openai language model instance" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI GPT-5 specific configurations" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › OPENAI Provider › should handle OpenAI reasoning models (o-series)" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › ANTHROPIC Provider › should validate anthropic API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="ANTHROPIC_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › GOOGLE Provider › should validate google API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="GOOGLE_GENERATIVE_AI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › MISTRAL Provider › should validate mistral API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="MISTRAL_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › PERPLEXITY Provider › should validate perplexity API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="PERPLEXITY_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › API Key Validation › XAI Provider › should validate xai API key" classname="provider-responses.test.ts" time="0">
<properties>
<property name="skip" value="XAI_API_KEY not configured">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5-mini" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should get real response from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle streaming from gpt-5" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Real Provider Responses › OPENAI Real API Calls › should handle invalid requests gracefully for openai" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Provider API Key Validation and Real Responses › Provider Integration Health Check › should have all configured providers working" classname="provider-responses.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reasoning-summary.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Reasoning Summary UI › GPT-5 Mini (openai) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Claude 3 Sonnet (anthropic) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Reasoning Summary UI › Gemini 1.5 Pro (google) › shows reasoning panel while streaming and allows toggling after completion" classname="reasoning-summary.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="settings.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Settings and Preferences E2E › Theme Settings › should toggle between light and dark themes" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Theme Settings › should persist theme preference in localStorage" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should save default model selection" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Model Preferences › should configure model-specific parameters" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should add and validate API key" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should handle invalid API key gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › API Key Management (BYOK) › should delete API key with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should configure voice recording preferences" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Voice Settings › should handle microphone permission denied" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should configure chat history retention" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should export chat history" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Chat History Settings › should clear all chat history with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should display usage statistics" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Usage Analytics › should switch usage time periods" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should update user profile" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should change password with validation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Account Settings › should delete account with confirmation" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should persist settings across browser sessions" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Settings and Preferences E2E › Settings Persistence and Sync › should handle settings sync conflicts gracefully" classname="settings.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.spec.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Voice Workflow E2E Tests › should complete full voice workflow - record, transcribe, edit, index, and send to chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle voice recording errors gracefully" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should handle transcript indexing failures" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should maintain voice session state across component interactions" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should support voice transcript search functionality" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow E2E Tests › should integrate voice workflow with multi-model chat" classname="voice-workflow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="voice-workflow.test.ts" timestamp="2025-08-28T09:31:56.950Z" hostname="Google Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Voice Workflow Integration › Voice Session Management › should initialize voice session successfully" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should handle voice session creation failure" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Session Management › should end voice session properly" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle microphone access permissions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should start and stop recording" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should transcribe voice input" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Recording and Transcription › should handle transcription errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should receive and play voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should show transcript alongside voice response" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Response and Playback › should handle voice response playback errors" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should allow voice model selection" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should configure voice parameters" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Settings and Configuration › should test voice functionality from settings" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should seamlessly switch between voice and text" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should preserve chat context in voice mode" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice and Chat Integration › should handle mixed media responses" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should handle poor network conditions" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should monitor audio quality" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Voice Workflow Integration › Voice Performance and Quality › should provide fallback when voice features fail" classname="voice-workflow.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>